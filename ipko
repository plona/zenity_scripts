#!/bin/bash

stderr_log="/dev/shm/stderr.log.$$"
exec 2>"$stderr_log"

exit_handler() {
#    zenity --error --text="Wystąpił błąd wewnętrzny.\nZostanie wyświetlony opis błędu"
    zenity --text-info --title="Wystąpił błąd wewnętrzny:" --width=600 --height=300 --filename="$stderr_log"
}
trap exit_handler EXIT
trap exit ERR

debug=false
dbgsep='################################'
crypted_file=''
secret_dir="$HOME/"

cipher='aes-256-cbc'
field_sep="$(printf '\t')"
font='Courier New 10'

usage() {
    echo "In function $FUNCNAME: FUNCNAME=${FUNCNAME[*]}" >&2
    echo "Usage: $0 [-d star_dir] [-f file_do_decrypt]" 1>&2
    exit 1
}

while getopts "d:f:" o; do
    case "${o}" in
        d) secret_dir=${OPTARG}'/' ;;
        f) crypted_file=${OPTARG} ;;
        *) usage ;;
    esac
done

if $debug; then
    echo $dbgsep
    echo "In function $FUNCNAME: FUNCNAME = ${FUNCNAME[*]}" >&2
    echo "secret_dir = $secret_dir"
    echo "crypted_file = $crypted_file"
    echo $dbgsep
fi

giveup() {
    local ru='Rezygnacja użytkownika'
    zenity --info --text="$ru"
    exit 2
}

var2tab() {
    local var="$1"
    local rval=$2
    local col_heads='|'
    local col_bar='+'
    local col_content='|'
    local content
    for ((i=1; $i<=${#var}; i++)); do
        [[ $i -gt 9 ]] && col_heads+=" $i|" || col_heads+=" $i |"
        col_bar+='---+'
        col_content+=" ${var:i-1:1} |"
    done 
    content=$"$col_heads\n$col_bar\n$col_content\n"
    eval $rval="'$content'"
}

get_file() {
    local rval="$1"
    local file_filter=""
    shift
    until [ -z "$1" ]
    do
        file_filter+="$1 "
        shift
    done
    [[ -z "$file_filter" ]] && file_filter="*"
    echo $file_filter
    local file_name=$(zenity --file-selection --filename=$secret_dir --file-filter="$file_filter")
    [[ -z "$file_name" ]] && { zenity --info --text="$ru"; exit 2; }
    eval $rval="'$file_name'"
}

split_base_ext() {
    # .file -> '' 'file'
    # file  -> 'file' ''
    # file. -> 'file' ''
    # file.na me.ext ension -> 'file.na me' 'ext ension'
    local file="$1"
    local file_base=$2
    local file_ext=$3
    local file_array ext base oIFS dots last_char

    last_char=${file: -1}
    if [ "." = "$last_char" ]; then
        base=${file:0:-1}
        ext=''
    else
        dots=$(grep -o '\.' <<<"$file" | grep -c .)
        if [ $dots -eq 0 ]; then
            base=$file
            ext=''
        else
            oIFS=$IFS
            IFS='.' file_array=($file)
            IFS=$oIFS
            i=$((${#file_array[@]} - 1))        # last element
            ext=${file_array[$i]}
            l=${#ext}                           # ext length
            base=${file:0:-(($l + 1 ))}
        fi
    fi

    if $debug; then
        echo $dbgsep
        echo "In function $FUNCNAME: FUNCNAME = ${FUNCNAME[*]}" >&2
        echo "file = $file"
        echo "base = $base"
        echo "ext = $ext"
    fi
    eval $file_base="'$base'"
    eval $file_ext="'$ext'"
}

get_pass() {
    local pass1=$1                              # hasło deszyfrujące
    local pass2=$2                              # hasło szyfrujące
    local -r mode=$3                               # tryb pracy [1|2|3|4]
    local pass pass_array field1 field2 field3 oIFS tabs
    local pp=$"\nPonowić próbę?"

    case $mode in
        1)                                      # hasło
            pass=$(zenity --password)
            ;;
        2)                                      # nowe hasło + powtórzenie
            pass=$(zenity \
                --title "Szyfrowanie pliku" \
                --forms \
                --text="Wprowadź hasło szyfrujące" \
                --add-password="Hasło" \
                --add-password="Powtórz hasło" \
                --separator="$field_sep")
            ;;
        3)                                      # stare hasło; nowe hasło + powtórzenie
            pass=$(zenity \
                --title "Zmiana hasła" \
                --forms \
                --text="Zmiana hasła do pliku" \
                --add-password="Stare hasło" \
                --add-password="Nowe hasło" \
                --add-password="Powtórz nowe hasło" \
                --separator="$field_sep")
            ;;
        4)                                      # treść pliku; nowe hasło + powtórzenie
            pass=$(zenity \
                --title "Zaszyfruj treść" \
                --forms \
                --text="Nowy zaszyfrowany plik z hasłem" \
                --add-entry="Treść do zaszyfrowania" \
                --add-password="Hasło" \
                --add-password="Powtórz hasło" \
                --separator="$field_sep")
            ;;
        *)
            zenity --error --text="Funkcja: ${FUNCNAME[0]}: błąd parametru"
            exit 1
            ;;
    esac
    [[ $? -eq 0 ]] || giveup

    if [ $mode -eq 1 ]; then
        eval $pass1="'$pass'"
        return
    fi

    tabs=$(grep -o "$field_sep" <<<"$pass" | grep -c .)
    oIFS=$IFS
    IFS="$field_sep" pass_array=($pass)
    IFS=$oIFS

    mode=1
    case $mode in
        2)                                      # nowe hasło + powtórzenie
            ;;
        3)                                      # stare hasło; nowe hasło + powtórzenie
            ;;
        4)                                      # treść pliku; nowe hasło + powtórzenie
            ;;
    esac
    if [ "${pass_array[0]}" != "${pass_array[1]}" ]; then
        zenity --question  --title="Niezgodność haseł" --text="Niepoprawnie powtórzone hasło.$pp"
        [[ $? -eq 0 ]] && return 1 || exit 2
    fi

    if [ -z "${pass_array[0]}" ]; then
        zenity --question  --title="Puste hasło" --text="Hasło nie może być \"puste\".$pp"
        [[ $? -eq 0 ]] && return 1 || exit 2
    fi

    eval $pass2="'${pass_array[0]}'"
}

show_pass_file() {
    local passwd cmd file_contain display_text file

    [[ -n "$crypted_file" ]] && file="$crypted_file" || get_file file "*.enc"

    get_pass passwd dummy 1

    cmd="openssl enc -d -$cipher -in \"$file\" -salt -k \"$passwd\" 2>/dev/null"
    file_contain=$(eval "$cmd") || { zenity --error --text="Niepoprawne hasło"; exit 2; }

    var2tab "$file_contain" display_text
    echo -ne ${display_text} | zenity --title="Top Secret!" --width=1024 --height=300 --text-info  --font="$font"
}

file_de_en_crypt() {
    local mode=$1
    local ext file new_file selected_file passwd cmd msg1 msg2 pass_mode

    case $mode in
        e) 
            ext=''
            msg1='Nieznany błąd szyfrowania pliku.'
            msg2='niezaszyfrowany'
            pass_mode=2
            ;;
        d) 
            ext='*.enc'
            msg1="Błędne hasło lub\nnieznany błąd deszyfracji pliku."
            msg2='zaszyfrowany'
            pass_mode=1
            ;;
        *) 
            zenity --error --text="${FUNCNAME[*]}: błąd parametru"
            exit 1
            ;;
    esac

    get_file file $ext
    if [ $mode == "d" ]; then                   # deszyfracja
        split_base_ext "$file" new_file dummy
        get_pass passwd dummy 1
    else                                        # szyfrowanie
        new_file="$file.enc"
        local get_pass_ok=1
        until [ $get_pass_ok -eq 0 ]; do
            get_pass dummy passwd $pass_mode
            get_pass_ok=$?
        done
    fi

    if [ -e "$new_file" ] ; then
        selected_file=$(zenity --file-selection \
                        --filename="$new_file" \
                        --save \
                        --confirm-overwrite)
        [[ $? -eq 0 ]] && new_file="$selected_file" || { zenity --info --text="$ru"; exit 2; }
    fi

    if $debug; then
        echo $dbgsep
        echo "In function $FUNCNAME: FUNCNAME = ${FUNCNAME[*]}" >&2
        echo "mode = $mode"
        echo "file = $file"
        echo "new_file = $new_file"
        echo $dbgsep
    fi

    cmd="openssl enc -$mode -$cipher -in \"$file\" -out \"$new_file\" -salt -k \"$passwd\""
#-------------------------------------------------------------------------------
echo $cmd
#  # :TODO:23.09.2016 21:46:12:marekpl: przy deszyfracji sprawdzać kod wyjścia i inny komunikat
#-------------------------------------------------------------------------------
    eval "$cmd" || { zenity --error --text="$msg1"; exit 1; }

    zenity --question --title "Usunąć $msg2 plik?" --text="Usunąć plik:\n$file"
    if [ $? -eq 0 ]; then
        cmd="rm -fv \"$file\""
        zenity --info --text="$(eval ${cmd})"
    fi
}

[[ -n "$crypted_file" ]] && { show_pass_file; exit; }
#-------------------------------------------------------------------------------
# 
get_pass op np 5
exit
#-------------------------------------------------------------------------------

ans=$(zenity  \
    --list  \
    --title "" \
    --text "Wybierz czynność" \
    --radiolist  \
    --hide-header \
    --column "Wybierz" \
    --column "hidden" \
    --column "Czynność" \
    TRUE "show_pass_file" "Wyświetl hasło z zaszyfrowanego pliku" \
    FALSE "new_pass_file" "Nowy zaszyfrowany plik z hasłem" \
    FALSE "decrypt" "Odszyfruj plik" \
    FALSE "crypt" "Zaszyfruj plik" \
    FALSE "pwchange" "Zmiana hasła do pliku" \
    --hide-column=2 \
    --width=350 \
    --height=200)

case $ans in
    show_pass_file)
        echo "pokaż hasło"
        show_pass_file
        ;;
    new_pass_file)
        echo "Nowy zaszyfrowany plik"
        ;;
    decrypt)
        echo "deszyfracja pliku"
        file_de_en_crypt 'd'
        ;;
    crypt)
        echo "szyfrowanie pliku"
        file_de_en_crypt 'e'
        ;;
    pwchange)
        echo "zmiana hasła do pliku"
        ;;
    *)
        echo "Rezygnacja użytkownika"
        exit 2
        ;;
esac

